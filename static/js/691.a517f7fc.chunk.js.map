{"version":3,"file":"static/js/691.a517f7fc.chunk.js","mappings":"uQAIaA,EAAaC,EAAAA,GAAAA,IAAH,sBACVC,EAAaD,EAAAA,GAAAA,KAAH,8IAQVE,EAAkBF,EAAAA,GAAAA,MAAH,wLASfG,EAAgBH,EAAAA,GAAAA,OAAH,qOAabI,EAAaJ,EAAAA,GAAAA,GAAH,wRAaVK,EAAaL,EAAAA,GAAAA,GAAH,2OAQVM,EAAkBN,EAAAA,GAAAA,EAAH,uGASfO,EAAgBP,EAAAA,GAAAA,IAAH,+LAWbQ,GAAaR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,mE,SC0BvB,EAvFe,WACb,OAAoCU,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,EAAWJ,EAAaK,IAAI,UAElCC,EAAAA,EAAAA,YAAU,WACJF,GAAUG,EAASH,EACxB,GAAE,CAACA,IAEJ,IAYMG,EAAW,SAAAC,IACfC,EAAAA,EAAAA,IAAeD,GACZE,MAAK,SAAAC,GACJb,EAAca,EAAIC,KAAKC,QACxB,IACAC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,QACrB,GACJ,EAcD,OACE,UAAClC,EAAD,YACE,UAACE,EAAD,CAAYiC,SAdK,SAAAC,GACnBA,EAAYC,iBACc,KAAtBzB,EAAW0B,QAIfd,EAASZ,GAvBe,WACxB,GAAmB,KAAfA,EACF,OAAOM,EAAgB,CAAC,GAE1BA,EAAgB,CAAEqB,MAAO3B,GAC1B,CAmBC4B,GACA3B,EAAc,KALZ4B,MAAM,2GAMT,EAKG,WACE,SAACtC,EAAD,CACEuC,KAAK,OACLC,KAAK,aACLC,aAAa,MACbC,MAAOjC,EACPkC,WAAS,EACTC,YAAY,gBACZC,UAAQ,EACRC,SA7Ce,SAAAC,GACrB,IAAQL,EAAUK,EAAMC,cAAhBN,MACRhC,EAAcgC,EACf,KA4CK,SAACzC,EAAD,CAAesC,KAAK,SAApB,wBAEF,SAACrC,EAAD,UACGS,EAAWsC,KAAI,SAAAC,GAAK,OACnB,UAAC/C,EAAD,YACE,UAACC,EAAD,WACG8C,EAAMC,eADT,YAEQD,EAAME,aAAaC,MAAM,EAAG,GAFpC,SAIA,SAAC/C,EAAD,CAAYgD,GAAE,UAAKJ,EAAMK,IAAMC,MAAO,CAAEC,KAAMzC,GAA9C,SACGkC,EAAMQ,aACL,SAACrD,EAAD,CACEsD,IAAG,UA1BJ,uCA0BI,OAAcT,EAAMQ,aACvBE,IAAG,UAAKV,EAAMC,mBAGhB,SAAC9C,EAAD,CACEsD,IAAI,+EACJC,IAAI,iBAdKV,EAAMK,GADJ,QAwB5B,C,uKClGDM,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAER,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQF,EAAAA,EAAAA,IAAA,qCAAwCC,IADhD,0GAIA,SAAevC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BD,GAA9B,iFACQuC,EAAAA,EAAAA,IAAA,+BAAkCC,EAAlC,kBAAkDxC,IAD1D,0GAIA,SAAe0C,EAAtB,+CAAO,OAAP,oBAAO,WAAwBC,GAAxB,iFACQJ,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,oBAAsCH,IAD9C,0GAIA,SAAeI,EAAtB,iDAAO,OAAP,oBAAO,WAA4BD,EAASE,GAArC,iFACQN,EAAAA,EAAAA,IAAA,gBAAmBI,EAAnB,YAA8BE,EAA9B,oBAAiDL,IADzD,0G","sources":["pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","service/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nimport { Link } from 'react-router-dom';\n\nexport const MoviesWrap = styled.div``;\nexport const MoviesForm = styled.form`\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 10px;\n  display: flex;\n  gap: 10px;\n  width: 480px;\n`;\nexport const MoviesFormInput = styled.input`\n  width: 400px;\n  height: 100%;\n  padding: 12px 20px;\n  display: inline-block;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n`;\nexport const MoviesFormBtn = styled.button`\n  text-transform: uppercase;\n  cursor: pointer;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n  &:hover,\n  &:focus {\n    color: blue;\n    background-color: green;\n  }\n`;\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MoviesItem = styled.li`\n  padding-bottom: 10px;\n  border-radius: 2px;\n  background-color: lightgrey;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MoviesItemTitle = styled.p`\n  text-align: center;\n  padding: 10px;\n\n  &:hover {\n    color: blue;\n  }\n`;\n\nexport const MoviesItemImg = styled.img`\n  width: 100%;\n  height: 260px;\n  object-fit: contain;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    transform: scale(1.03);\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  color: black;\n`;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { getSeachMovies } from '../../service/moviesApi';\nimport {\n  MoviesWrap,\n  MoviesForm,\n  MoviesFormInput,\n  MoviesFormBtn,\n  MoviesList,\n  MoviesItem,\n  MoviesItemTitle,\n  MoviesItemImg,\n  StyledLink,\n} from './Movies.styled';\n\nconst Movies = () => {\n  const [searchWord, setSearchWord] = useState('');\n  const [dataSearch, setDataSearch] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const URLquery = searchParams.get('query');\n\n  useEffect(() => {\n    if (URLquery) runQuery(URLquery);\n  }, [URLquery]);\n\n  const onChangeHandel = event => {\n    const { value } = event.currentTarget;\n    setSearchWord(value);\n  };\n\n  const updateQueryString = () => {\n    if (searchWord === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ query: searchWord });\n  };\n\n  const runQuery = queryWord => {\n    getSeachMovies(queryWord)\n      .then(res => {\n        setDataSearch(res.data.results);\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  };\n\n  const onSubmitForm = eventSubmit => {\n    eventSubmit.preventDefault();\n    if (searchWord.trim() === '') {\n      alert('Ведіть назву фільму');\n      return;\n    }\n    runQuery(searchWord);\n    updateQueryString();\n    setSearchWord('');\n  };\n\n  const imgURL = 'https://image.tmdb.org/t/p/original';\n  return (\n    <MoviesWrap>\n      <MoviesForm onSubmit={onSubmitForm}>\n        <MoviesFormInput\n          type=\"text\"\n          name=\"searchWord\"\n          autoComplete=\"off\"\n          value={searchWord}\n          autoFocus\n          placeholder=\"Search movies\"\n          required\n          onChange={onChangeHandel}\n        />\n        <MoviesFormBtn type=\"submit\">Search</MoviesFormBtn>\n      </MoviesForm>\n      <MoviesList>\n        {dataSearch.map(movie => (\n          <MoviesItem key={movie.id}>\n            <MoviesItemTitle>\n              {movie.original_title}\n              {` (${movie.release_date.slice(0, 4)})`}\n            </MoviesItemTitle>\n            <StyledLink to={`${movie.id}`} state={{ from: location }}>\n              {movie.poster_path ? (\n                <MoviesItemImg\n                  src={`${imgURL}${movie.poster_path}`}\n                  alt={`${movie.original_title}`}\n                />\n              ) : (\n                <MoviesItemImg\n                  src=\"https://upload.wikimedia.org/wikipedia/commons/6/65/No-Image-Placeholder.svg\"\n                  alt=\"no image\"\n                />\n              )}\n            </StyledLink>\n          </MoviesItem>\n        ))}\n      </MoviesList>\n    </MoviesWrap>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '6746b4dbb69b720741ecbdc7655d3557';\n\nexport async function getTrendMovies() {\n  return await axios.get(`trending/movie/day?api_key=${apiKey}`);\n}\n\nexport async function getSeachMovies(queryWord) {\n  return await axios.get(`search/movie?api_key=${apiKey}&query=${queryWord}`);\n}\n\nexport async function getMovie(movieId) {\n  return await axios.get(`movie/${movieId}?api_key=${apiKey}`);\n}\n\nexport async function getMovieInfo(movieId, subType) {\n  return await axios.get(`movie/${movieId}/${subType}?api_key=${apiKey}`);\n}\n"],"names":["MoviesWrap","styled","MoviesForm","MoviesFormInput","MoviesFormBtn","MoviesList","MoviesItem","MoviesItemTitle","MoviesItemImg","StyledLink","Link","useState","searchWord","setSearchWord","dataSearch","setDataSearch","useSearchParams","searchParams","setSearchParams","location","useLocation","URLquery","get","useEffect","runQuery","queryWord","getSeachMovies","then","res","data","results","catch","error","console","message","onSubmit","eventSubmit","preventDefault","trim","query","updateQueryString","alert","type","name","autoComplete","value","autoFocus","placeholder","required","onChange","event","currentTarget","map","movie","original_title","release_date","slice","to","id","state","from","poster_path","src","alt","axios","apiKey","getTrendMovies","getMovie","movieId","getMovieInfo","subType"],"sourceRoot":""}